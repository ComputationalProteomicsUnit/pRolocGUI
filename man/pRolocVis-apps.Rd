% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pRolocVis.R, R/pRolocVis_classify.R, R/pRolocVis_pca.R
\name{pRolocVis}
\alias{pRolocVis}
\alias{pRolocVis_classify}
\alias{pRolocVis_pca}
\title{Interactive visualisation of spatial proteomics data}
\usage{
pRolocVis(object, app, fcol, legend.cex = 1, ...)

pRolocVis_classify(object, fcol, scol, mcol = "markers", legend.cex = 1,
  method, ...)

pRolocVis_pca(object, fcol, foi, fig.height = "600px", fig.width = "100\%",
  legend.width = "200\%", legend.cex = 1, nchar = 40, all = TRUE,
  fDataInd)
}
\arguments{
\item{object}{An instance of class \code{MSnSet}, or a list of \code{MSnSet}
objects of length 2 if using "compare" application.}

\item{app}{The type of application requested: "main",
"classify", "compare". The default is "main". See description below.}

\item{fcol}{The feature meta-data label (fData column name). This will correspond
to the prediction column if using "classify", or the markers (labelled data) 
to be plotted otherwise.}

\item{legend.cex}{Point character expansion for the the legend.
Default is 1.}

\item{...}{Additional parameters.}

\item{scol}{The feature meta data column containing the 
classification scores.}

\item{mcol}{The feature meta data column containing the labelled training 
data, for use with "classify".}

\item{method}{Either a \code{character} of a \code{matrix}. When
the former, one of \code{"PCA"} (default), \code{"MDS"},
\code{"kpca"} or \code{"t-SNE"}, defining if dimensionality
reduction is done using principal component analysis (see
\code{\link{prcomp}}), classical multidimensional scaling (see
\code{\link{cmdscale}}), kernel PCA (see \code{kernlab::kpca}) or
t-SNE (see \code{tsne::tsne}). If a \code{matrix} is passed, its rownames
must match object's feature names and represent a projection of
the data in \code{object} in two dimensions, as produced (and invisibly
returned) by \code{plot2D}. This enables to re-generate the figure without
computing the dimensionality reduction over and over again, which
can be time consuming for certain methods. Available methods are listed
in \code{plot2Dmethods}.}

\item{foi}{A \code{\link{FeaturesOfInterest}} object.}

\item{fig.height}{Height of the figure. Default is \code{"600px"}.}

\item{fig.width}{Width of the figure. Default is \code{"100px"}.}

\item{legend.width}{Width of the legend. Default is \code{"200\%"}.}

\item{nchar}{Maximum number of characters of the markers class
names, before their names are truncated. Default is 10.}

\item{all}{If \code{TRUE} all clusters are displayed on startup.
If \code{FALSE} only first cluster in the list is displayed.
\code{\link{FoICollection}}, that will be available for display.}

\item{fDataInd}{A \code{numeric} or \code{character} corresponding to
the feature variables one wishes to retains for the data table. 
If not specified, by default \code{markers} will be kept along with 
the first 5 and last 6 feature variables.}
}
\value{
For \code{classify} a \code{numeric} vector of thresholds, 
one per class, to use with \code{\link{getPredictions}}

For \code{pca} a \code{character} of protein names, of the 
proteins selected upon application closure.
}
\description{
These functions allow one to explore spatial proteomics data interactively.
}
\details{
The function \code{pRolocVis} is a wrapper for \code{pRolocVis_main}, 
\code{pRolocVis_classify} and \code{pRolocVis_compare}.These Shiny apps 
allow to explore and analyse interactively spatial proteomics data.
 
The \code{main} Shiny app allows exploration of quantitative data (1) visually 
through Principle Component Analysis (PCA), (2) protein profiles, and (3)
a searchable feature data table, allowing visualisation of particular proteins
of interest.

The \code{classify} Shiny app is used to visualise classification results
and set user-specified thresholds for sub-cellular location predictions.

The \code{compare} Shiny app is meant for comparing protein localisation 
between two conditions, or two different experiments, replicates etc.
}
\examples{
library("pRoloc")
library("pRolocdata")
data(hyperLOPIT2015)
if (interactive()) {
  pRolocVis(hyperLOPIT2015)
}
## Load classification results from hyperLOPIT stored in fData
if (interactive()) {
  myThreshold <- pRolocVis(hyperLOPIT2015, app = "classify", 
                           fcol = "svm.classification", 
                           scol = "svm.score")
  newPredictions <- getPredictions(hyperLOPIT2015, fcol = "svm.classification", 
                                   scol = "svm.score", t = myThreshold)
}
}
\author{
Laurent Gatto, Lisa Breckels and Thomas Naake
}

